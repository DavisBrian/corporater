[
["data-visualization.html", "6 Data Visualization 6.1 Why ggplot2 6.2 Example 6.3 Facets 6.4 Exercises 6.5 Resources 6.6 Links", " 6 Data Visualization 6.1 Why ggplot2 The transferrable skills from ggplot2 are not the idiosyncracies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive. — Hadley Wickham Base plotting is imperative,it’s about what you do. You set up your layout(), then you go to the first group (drug) You add the points for that group (drug) along with a title. Then you fit and plot a best-fit-line for the first grouping, then the second grouping, and so on. Then you go on to the next plot. After 20 of those, you end with a legend. ggplot2 plotting is declarative, it’s about what your graph is. The graph has drug group mapped to the x-axis, prevalance rate mapped to the y, and abuse type mapped to the color. The graph displays both points and best-fit lines for each drug group And it’s faceted into one-plot-per-drug group, with a drug group described by its market name. Functional data visualization Wrange your data Map data to visual elements Tweak scales, guides, axis, labels, theme Easy to reason about how the data drives the visualization Easy to iterate East to be consistent ggplot2 is a huge package: philosophy + functions …but it’s very well organized Going to throw a lot at you …but you’ll know where and what to look for ggplot2 has it’s one website with some very good examples and how to do common task. See http://ggplot2.tidyverse.org/reference 6.2 Example What is similar / difrerent between these plots? What is and what isn’t driven by data? We’ll build this style of plot in stages. In chapter 9 of R for Data Science we will go into detail about how to get our data in this format. 6.2.1 Data All plots start with data. `ggplot expects the data to be in a “Tidy Data” format. We’ll dive deeper into “tidy data” in Chapter 9 of R for Data Science, but for now the basic principle is Each varible forms a column Each observation forms a row Each observational unit forms a table library(tidyverse) #&gt; -- Attaching packages ------ tidyverse 1.2.1 -- #&gt; v ggplot2 2.2.1 v purrr 0.2.4 #&gt; v tibble 1.4.2 v dplyr 0.7.4 #&gt; v tidyr 0.8.0 v stringr 1.3.0 #&gt; v readr 1.1.1 v forcats 0.3.0 #&gt; -- Conflicts --------- tidyverse_conflicts() -- #&gt; x dplyr::filter() masks stats::filter() #&gt; x dplyr::lag() masks stats::lag() dat &lt;- readRDS(&quot;H:/Projects/rclasscode/data/bargraphdat.RDS&quot;) dat #&gt; # A tibble: 18 x 5 #&gt; drug use_type mean lower upper #&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 Buprenorphine use 5.45 5.26 5.64 #&gt; 2 Fentanyl use 9.26 9.02 9.51 #&gt; 3 Hydrocodone use 46.8 46.4 47.2 #&gt; 4 Hydromorphone use 6.08 5.89 6.28 #&gt; 5 Methadone use 5.59 5.39 5.79 #&gt; 6 Morphine use 18.7 18.4 19.0 #&gt; # ... with 12 more rows p &lt;- ggplot(data = dat) p Thats uninteresting. We haven’t mapped the data to our plot yet. Let’s work on getting the bar chart roughly right. 6.2.2 Aesthetics Aesthetics map data to visual elements or parameters. drug -&gt; x-axis mean -&gt; y-axis use_type -&gt; color p &lt;- ggplot(data = dat, aes(x = drug, y = mean, color = use_type)) p 6.2.3 Geoms Geoms are short for geometric objects which are diplayed on the plot. Some of the more familiar ones are Type Function Point geom_point() Line geom_line() Bar geom_bar(), geom_col() Histogram geom_histogram() Regression geom_smooth() Boxplot geom_boxplot() Text geom_text() Vert./Horiz. Line geom_{vh}line() Count geom_count() Density geom_density() Those are just the top 10 most popular geoms See http://ggplot2.tidyverse.org/reference/ for many more options Or just start typing geom_ in RStudio #&gt; [1] &quot;geom_abline&quot; &quot;geom_area&quot; &quot;geom_bar&quot; &quot;geom_bin2d&quot; #&gt; [5] &quot;geom_blank&quot; &quot;geom_boxplot&quot; &quot;geom_col&quot; &quot;geom_contour&quot; #&gt; [9] &quot;geom_count&quot; &quot;geom_crossbar&quot; &quot;geom_curve&quot; &quot;geom_density&quot; #&gt; [13] &quot;geom_density_2d&quot; &quot;geom_density2d&quot; &quot;geom_dotplot&quot; &quot;geom_errorbar&quot; #&gt; [17] &quot;geom_errorbarh&quot; &quot;geom_freqpoly&quot; &quot;geom_hex&quot; &quot;geom_histogram&quot; #&gt; [21] &quot;geom_hline&quot; &quot;geom_jitter&quot; &quot;geom_label&quot; &quot;geom_line&quot; #&gt; [25] &quot;geom_linerange&quot; &quot;geom_map&quot; &quot;geom_path&quot; &quot;geom_point&quot; #&gt; [29] &quot;geom_pointrange&quot; &quot;geom_polygon&quot; &quot;geom_qq&quot; &quot;geom_quantile&quot; #&gt; [33] &quot;geom_raster&quot; &quot;geom_rect&quot; &quot;geom_ribbon&quot; &quot;geom_rug&quot; #&gt; [37] &quot;geom_segment&quot; &quot;geom_smooth&quot; &quot;geom_spoke&quot; &quot;geom_step&quot; #&gt; [41] &quot;geom_text&quot; &quot;geom_tile&quot; &quot;geom_violin&quot; &quot;geom_vline&quot; There are also many ggplot extensions that add other usefull geoms. See https://www.ggplot2-exts.org/ for many usefull features and extentions. p &lt;- ggplot(data = dat, aes(x = drug, y = mean, color = use_type)) + geom_col() p Oops…. The color only controls the border of our bar chart, what we want to do is fill the bar. Also, note that by default the bars are stacked. We can fix that by having the postion of each subgroup dodge each other. p &lt;- ggplot(data = dat, aes(x = drug, y = mean, fill = use_type)) + geom_col(position = &quot;dodge&quot;) p There are two types of bar charts: geom_bar makes the height of the bar proportional to the number of cases in each group (or if the weight aethetic is supplied, the sum of the weights). If you want the heights of the bars to represent values in the data, use geom_col instead. geom_bar will calculate the counts or proportions from the raw data. There is no reason to precompute those. geom_*(mapping, data, stat, position) data Geoms can have their own data Has to map onto global coordinates map Geoms can have their own aesthetics Inherits global aesthetics Have geom-specific aesthetics geom_point needs x and y, optional shape, color, size, etc. geom_ribbon requires x, ymin and ymax, optional fill ?geom_ribbon stat Some geoms apply further transformations to the data All respect stat = 'identity' Ex: geom_histogram uses stat_bin() to group observations position Some adjust location of objects 'dodge', 'stack', 'jitter' Now lets add the error bars to our plot. We will have to add the upper and lower bounds to our aesthetics, and align them with our bars. p &lt;- ggplot(data = dat, aes(x = drug, y = mean, fill = use_type, ymin = lower, ymax = upper)) + geom_col(position = &quot;dodge&quot;, width = 0.75) + geom_errorbar(position = position_dodge(width = 0.75), width = 0.5) p We’ve come pretty close to recreating the orginal plot. We still have some tweeking to do. Reorder the grouping so that “Use” comes before “Non-Medical Use” and use the full description. Change the fill colors Change the y-axis label to “Prevalence % (95% CI)” Remove the x-axis lable “drug”. Change the y-axis scales to go in increments of 5 Rotate the x-axis labels Remove the variable name over the legend. Move the legend to the bottom The first one is handled with our data. Factors to the rescue. while the second can be done with a named vector. # convert the use_type to a factor with the correct label dat$use_type &lt;-factor(dat$use_type, levels = c(&quot;use&quot;, &quot;nmu&quot;), labels = c(&quot;Lifetime Use&quot;, &quot;Lifetime Non-Medical Use&quot;)) p &lt;- ggplot(data = dat, aes(x = drug, y = mean, fill = use_type, ymin = lower, ymax = upper)) + geom_col(position = &quot;dodge&quot;, width = 0.75) + geom_errorbar(position = position_dodge(width = 0.75), width = 0.5) p 6.2.4 Scales Scales control the details of how data values are translated to visual properties. Override the default scales to tweak details like the axis labels or legend keys, or to use a completely different translation from data to aesthetic. labs() xlab() ylab() and ggtitle() modify the axis, legend, and plot labels. bar_colors &lt;- c(&quot;Lifetime Use&quot; = &quot;grey&quot;, &quot;Lifetime Non-Medical Use&quot; = &quot;blue&quot;) p &lt;- ggplot(data = dat, aes(x = drug, y = mean, fill = use_type, ymin = lower, ymax = upper)) + geom_col(position = &quot;dodge&quot;, width = 0.75) + geom_errorbar(position = position_dodge(width = 0.75), width = 0.5) + scale_fill_manual(values=bar_colors) + # change the bar colors scale_y_continuous(breaks = seq(0, ceiling(max(dat$upper)), 5) ) + # change the y-axis scale labs(x = NULL, # Remove the x-axis label &quot;drug&quot; y = &quot;Prevalence % (95% CI)&quot;) # Change the y-axis label p 6.2.5 Themes Themes control the display of all non-data elements of the plot. You can override all settings with a complete theme like theme_bw(), or choose to tweak individual settings by using theme() and the element_ functions. There are a handful of built in themes and tons of packages that have additional themes. `ggthemes has a collection of themes used by various organization (Ex. The Economist, Fivethiryeight.com, The Wall St. Journal, etc) Themes contain a huge number or parameters, grouped by plot area: Global options: line, rect, text, title axis: x-, y- or other axis title, ticks, lines legend: Plot legends panel: Actual plot area plot: Whole image strip: Facet labels p + theme_classic() This is almost what we want. Our final code would look like: library(tidyverse) dat &lt;- readRDS(&quot;H:/Projects/rclasscode/data/bargraphdat.RDS&quot;) # convert the use_type to a factor with the correct label dat$use_type &lt;-factor(dat$use_type, levels = c(&quot;use&quot;, &quot;nmu&quot;), labels = c(&quot;Lifetime Use&quot;, &quot;Lifetime Non-Medical Use&quot;)) bar_colors &lt;- c(&quot;Lifetime Use&quot; = &quot;grey&quot;, &quot;Lifetime Non-Medical Use&quot; = &quot;blue&quot;) p &lt;- ggplot(data = dat, aes(x = drug, y = mean, fill = use_type, ymin = lower, ymax = upper)) + geom_col(position = &quot;dodge&quot;, width = 0.75) + geom_errorbar(position = position_dodge(width = 0.75), width = 0.5) + scale_fill_manual(values=bar_colors) + # change the bar colors scale_y_continuous(breaks = seq(0, ceiling(max(dat$upper)+15), 5), # change the y-axis scale expand = c(0,0)) + # remove the spacing between the x axis and the bars labs(x = NULL, # Remove the x-axis label &quot;drug&quot; y = &quot;Prevalence % (95% CI)&quot;) + # Change the y-axis label theme_classic() + theme(legend.position = &quot;bottom&quot;, # move the legend to the bottom legend.title = element_blank(), # remove the legend variable axis.text.x = element_text(angle = 90, hjust = 1)) # rotate the x-axis text p 6.2.6 Re-Imagining the plot p + coord_flip() + theme(axis.text.x = element_text(angle = 0, hjust = 1)) # reset the x-axis text p &lt;- ggplot(data = dat, aes(x = drug, y = mean, color = use_type, ymin = lower, ymax = upper)) + geom_point() + geom_errorbar(width = 0.5) + scale_fill_manual(values=bar_colors) + # change the bar colors scale_y_continuous(breaks = seq(0, ceiling(max(dat$upper)+15), 5), # change the y-axis scale expand = c(0,0)) + # remove the spacing between the x axis and the bars labs(x = NULL, # Remove the x-axis label &quot;drug&quot; y = &quot;Prevalence % (95% CI)&quot;) + # Change the y-axis label theme_classic() + theme(legend.position = &quot;bottom&quot;, # move the legend to the bottom legend.title = element_blank(), # remove the legend variable ) + # rotate the x-axis text coord_flip() p 6.3 Facets Facets are subplots of the data with each subplot displaying one subset of the data. p &lt;- ggplot(data = dat, aes(x = fct_reorder(drug, mean), y = mean, fill = use_type, ymin = lower, ymax = upper)) + geom_col(width = 0.75) + geom_errorbar(position = position_dodge(width = 0.75), width = 0.5) + facet_wrap(~ use_type, scales = &quot;free&quot;) + scale_fill_manual(values=bar_colors) + # change the bar colors scale_y_continuous(breaks = seq(0, ceiling(max(dat$upper)+15), 5), # change the y-axis scale expand = c(0,0)) + # remove the spacing between the x axis and the bars labs(x = NULL, # Remove the x-axis label &quot;drug&quot; y = &quot;Prevalence % (95% CI)&quot;) + # Change the y-axis label theme_classic() + theme(legend.position = &quot;bottom&quot;, # move the legend to the bottom legend.title = element_blank()) + # remove the legend variable coord_flip() p 6.4 Exercises 6.5 Resources 6.6 Links http://ggplot2.tidyverse.org/reference/ ggplot wiki R Cookbook ggplot turtorial Examples and Themes hmbrthemes Visualizing Data 6.6.1 Math and symbols labeller bquote method Beautiful Plots Cheatsheet Corporate Palettes Maps Writing Functions with ggplot ggplot2 function writing tips Base plot Base plot limits base R Graphics "]
]
